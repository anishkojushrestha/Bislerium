@page "/login"
@using Bislerium.Data
@inject NavigationManager NavManager

<style>
    body {
        font-family: 'Arial', sans-serif;
        margin: 0;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
        background-color: #f0f0f0;
    }

    .login-container {
        max-width: 400px;
        width: 100%;
    }

    .login-card {
        background-color: #fff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
        text-align: center;
    }

        .login-card h2 {
            color: #333;
        }

    form {
        display: flex;
        flex-direction: column;
    }

    input {
        padding: 10px;
        margin-bottom: 16px;
        border: 1px solid #ccc;
    }

    button {
        background-color: #007BFF;
        color: #fff;
        padding: 12px;
        border: none;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s ease;
    }

        button:hover {
            background-color: #0056b3;
        }

</style>

<div class="login-container">
    <div class="login-card">
        <h2>Login</h2>
        <form method="post" @onsubmit="SubmitLogin">
            @if (!string.IsNullOrEmpty(_errMsg))
            {
                <AlertMessage Type="danger" Message="@_errMsg" />
            }
            <input type="text" id="username" name="username" @bind="_username" placeholder="Enter your username" required>
            <input type="password" id="password" name="password" @bind="_password" placeholder="Enter your password" required>
            <button type="submit">Login</button>
        </form>

    </div>
</div>

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private string _username { get; set; }
    private string _password { get; set; }
    private string _errMsg = "";

    protected override void OnInitialized()
    {
        

        _globalState.CurrentUser = null;
        _errMsg = "";
    } 

    private void SubmitLogin()
    {
        try
        {
            _errMsg = "";

            List<User> users = UserService.GetAll();
            User user = users.FirstOrDefault(x => x.Username == _username);
            if (user != null)
            {
                var hashedPassword = Utility.HasdPassword(_password);
                if (hashedPassword == user.Password)
                {
                    _globalState.CurrentUser = user;
                    NavManager.NavigateTo("/counter");
                }
                else
                {
                    throw new Exception("Invalid Password");
                }
            }
            else
            {
                throw new Exception("Invalid Username");
            }
        }
        catch (Exception e)
        {
            _errMsg = e.Message;
            Console.WriteLine(e);
        }


    }



}